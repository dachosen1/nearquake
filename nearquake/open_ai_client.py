import logging
import os

from openai import OpenAI

from nearquake.config import _nearquake_secrets
from nearquake.utils.logging_utils import (
    get_logger,
    log_api_request,
    log_api_response,
    log_error,
    log_info,
)

_logger = get_logger(__name__)

client = OpenAI(api_key=_nearquake_secrets.get("OPENAI_API_KEY"))


def generate_response(
    prompt: str, role: str = "user", model: str = "gpt-4o-mini"
) -> str:
    """
    Generates a response from the open ai model based on the given role and prompt.

    :param role: The role of the user in the conversation ('user', 'system')
    :param prompt: The input prompt for the model
    :param model: Type of GPT model to use, defaults to gpt-4o-mini
    :return: the content of the response generated by the model.
    """

    valid_roles = ["role", "user"]

    if role not in valid_roles:
        log_error(
            _logger, f"Invalid role: {role}. Valid options are 'role' and 'user'."
        )
        raise ValueError("Error: Invalid role. Please choose 'role' or 'user'.")

    try:
        # Log the API request
        log_api_request(
            _logger,
            api_name="OpenAI",
            endpoint="chat.completions.create",
            params={"model": model, "role": role, "prompt_length": len(prompt)},
        )

        completion = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": role,
                    "content": prompt,
                },
            ],
        )

        # Log the prompt and successful response
        log_info(_logger, f"Prompt: {prompt}")
        log_api_response(
            _logger,
            api_name="OpenAI",
            endpoint="chat.completions.create",
            status_code=200,
            response_summary=f"Generated response with {len(completion.choices[0].message.content)} characters",
        )

        return completion.choices[0].message.content

    except Exception as e:
        log_error(_logger, "Unexpected error occurred during OpenAI API call", exc=e)
        return f"Error {e}"
